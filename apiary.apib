FORMAT: 1A
HOST: http://test-api.prioticket.com/passcode/v3

# PrioTicket Passcode API V3.0

## Interface Specification

### Description

The PrioTicket Distributor System is a platform through which tickets can be distributed for Venues and Services. 

With an activated Passcode users have access to Venues and Services. Entry is allowed when a valid Passcode gets scanned by the venue. 

To request a Passcode, the Distributor will initiate a request to the Get Passcode API. In the response activated QR-Codes will be sent.

To charge for the incurred cost of the provided access or service, PrioTicket will initiate a request to the Make Payment API. The Payment Gateway Provider needs to make a payment API service available that can accept requests according to the details of this interface specification.

# Group General

## Architecture
Seperate endpoints are used for the different related services.

The Get City List and the Get Passcode APIs are hosted by PrioTicket. <br>

<b>Note:</b> The Make Payment API is a working example, the Distributor or Payment Gateway Provider (PGP) needs to make this payment service available to accept requests according to the details of this interface specification.

The request data will be accepted in JSON format only and the response data will also be returned in JSON format.

## Headers

### Content-Type
The `Content-Type` should be "application/json".

### x-request-identifier
With each request, a unique request id `x-request-identifier` is passed in the header. This request id should be echoed back in the response through the "requestIdentifier" field. If this header is not present in the request, the service will reject the request by returning the HTTP error code 400 and giving the response with an appropriate error message.

### x-request-authentication
With each request, a `x-request-authentication` key is passed in. The steps behind computing this key are provided in the 
"RequestAuthenticationKey" section below. If this header is not present in the request, the request will be rejected by returning HTTP error code 401. 
If the value does not match the value received in the header, the request should be rejected by returning HTTP error code 403.

### RequestAuthenticationKey
The request authentication key will contain the following items: 

(a) API Key Token<br>
(b) Request Identifier

The API Key Token information for the TEST and LIVE environment will be sent in a separate mail.

The request authentication key will be computed per request as follows:
1. Create a string with format `<x-request-identifier>:<apikeytoken>` where `x-request-identifier` and `apikeytoken` are respective strings.
2. Convert the string from step 1 to byte array using UTF-8 encoding.
3. Compute the SHA-256 hash for the byte array from step 2. The result will be a byte array.
4. Base64 encode the byte array as computed in step 3. This string will be the `x-request-authentication` key for this request.

**Example header** 

> `Content-Type:application/json`<br>
> `X-REQUEST-AUTHENTICATION:Qek1i6+Z2DQHyQ2ozAOU3GDb/egaJHmvtFHVcFAfZeA=`<br>
> `X-REQUEST-IDENTIFIER:gdtesting_123`

## Security 
To allow secure data transmission between Suppliers and Distributors all API requests require HTTP.
Authentication is further enhanced by using an authentication key within the header of each request.

## General Formats

+ All data should be in the UTF-8 character set.
+ Currency values are sent in the ISO-4217 format. 
+ Language is defined in the ISO-639-1 format.
+ Amounts and values should follow the international standard.
+ All data fields are case-sensitive.
+ Optional parameters that are not set or left empty will not be returned in the response.

## Date/time Formats

Points in time are expressed as strings using the ISO-8601 datetime format:

> Example datetime: `2016-12-22T18:00:00+01:00`

The local time of the venue with its UTC offset is expected.

#### Example:

Burj Khalifa entrance Ticket in Dubai for 12th of May 2016 at 14:00 (local time):

> Expected: `2016-12-05T14:00:00+04:00`

> Not expected: `2016-12-05T10:00:00+08:00` / `2016-12-05T18:00:00+00:00`

Note that although the above examples express the same point in time, 
only the first one is considered as valid because the date and time is required in reference to the location of the activity.

#### Guest types

All tickets require a `ticket_type` value. This parameter describes a specific type of individual.

List of supported guest-types:

+ ADULT
+ YOUTH
+ CHILD
+ INFANT
+ SENIOR
+ PERSON

# Data Structures

## Get City List

### Get City List valid request
+ `request_type`: `get_city_list` (string, fixed, required) - "get_city_list" for this request
+ `data` (object, fixed-type, required)
     + `distributor_id`: `1037` (number, required) - Unique identifier for distributor assigned by PrioTicket.    

### Get City List valid response
  + `response_type`: `get_city_list` (string, fixed, required) - "get_city_list" for this response
  + `distributor_id`: `1037` (number, required) - Unique identifier for distributor assigned by PrioTicket.
  + `city_list` (array[City])   

### City
+ `London` (object) - Only returned if city_code(s) are provided in request
    + `country_code`: `UK`
    + `country_name`: `United Kingdom`
    + `region_code`: `UKEN`
    + `region_name`: `England`
    + `city_code`: `UKENLOND`
    + `city_name`: `London`
    + `currency_code`: `GBP`
    + `time_zone`: `+04:00`
    + `latitude`: `51.516998`
    + `longitude`: `-0.105000`
    + `active_venues`: `10`
+ `Dubai` (object) - Only returned if city_code(s) are provided in request
    + `country_code`: `AE`
    + `country_name`: `United Arab Emirates`
    + `region_code`: `AEDU`
    + `region_name`: `Dubayy`
    + `city_code`: `AEDUDUBA`
    + `city_name`: `Dubai`
    + `currency_code`: `AED`
    + `time_zone`: `+04:00`
    + `latitude`: `25.230000`
    + `longitude`: `55.279999`
    + `active_venues`: `8`

+ `Amsterdam` (object) - Only returned if city_code(s) are provided in request
    + `country_code`: `NL`
    + `country_name`: `Netherlands`
    + `region_code`: `NLNH`
    + `region_name`: `Noord-Holland`
    + `city_code`: `NLNHAMST`
    + `city_name`: `Amsterdam`
    + `currency_code`: `EUR`
    + `time_zone`: `+04:00`
    + `latitude`: `52.349998`
    + `longitude`: `4.917000`
    + `active_venues`: `35`

## Get Passcode

### Get Passcode valid request
+ `request_type`: `get_passcode` (string, fixed, required) - "get_passcode" for this request
+ `data` (object, fixed-type, required)
     + `distributor_id`: `1037` (string, required) - Unique identifier for distributor assigned by PrioTicket.
     + `distributor_reference`: `ABC123456` (string, required) - A unique booking identifier within the Distributor's systems.
     + `lead_name`: `Gabriel` (string, required)
     + `lead_email`: `gabriel@prioticket.com` (string, required)
     + `pass_valid_from`: `2017-12-20T14:00:00+04:00` (string, required)
     + `pass_valid_upto`: `2017-12-21T14:00:00+04:00` (string, required)
     + `city` (array, optional) - Optional: to retrieve a list of active attractions for a specific city in the response. A list of city_codes for active cities can be requested with the "Get City List" API
        + `ESMDMADR`
        + `USNYNYOR`
     + `language`:`en` (string, optional)
     + `guest_currency`:`EUR` (string, optional) - Optional: If provided, the Make Payment API request will be send in the guest_currency, else in the supplier_currency
     + `group_code_value`: `XXXXXX` (string, optional) - Optional: If a code is provided then this code will be activated in the response, else a code will be generated. 
     + `guest_details` (array)
         + (Adult Guest request)
         + (Child Guest request)
    + `upfront_payment`: `0` (string, optional) - Optional: If blank or 0, upfront payment is not required. If 1 then required. 
    + `additional_remarks` (string, optional) - Additional information for the receiver.    

### Get Passcode valid response
  + `response_type`: `get_passcode` (string, fixed, required) - "get_passcode" for this response
  + `data` (object)
    + `distributor_id`: `1037` (string, required) - Unique identifier for distributor assigned by PrioTicket.
    + `distributor_reference`: `ABC123456` (string, required) - A unique booking identifier within the Distributor's systems.
    + `order_id`: `15147415745`
    + `lead_name`: `Gabriel`
    + `lead_email`: `gabriel@prioticket.com`
    + `attractions` (array) - Only returned if city_code(s) are provided in the request
        + (City response) (array)
    + `code_type`: `QR_CODE`
    + `group_code_value`: `avsc12`
    + `language`: `en`
    + `guest_currency`: `EUR`
    + `guest_details` (array)
        + (Adult Guest response)
        + (Child Guest response)
    + `upfront_payment`: `0` (string, optional) - Optional: If blank or 0, upfront payment is not required. If 1 then required.

### Child Guest request
+ `guest_id`: `1`
+ `guest_name`: `John`
+ `guest_email`: `john@gmail.com`
+ `guest_type`: `Child`
+ `guest_age`: `10` (string, optional) - For non-adult guests its recommended to provide the guest_age.            
+ `code_value`: `XXXXX` - Optional: If code is provided then this code will be activated in the response, else a code will be generated.            

### Child Guest response
+ `guest_id`: `1`
+ `guest_name`: `John`
+ `guest_email`: `john@gmail.com`
+ `guest_type`: `Child`
+ `guest_age`: `10`                
+ `code_value`: `457av1`

### Adult Guest request
+ `guest_id`: `2`,
+ `guest_name`: `Gabriel`
+ `guest_email`: `gabriel@prioticket.com`
+ `guest_type`: `Adult`
+ `guest_age`: `28` (string, optional)          
+ `code_value`: `XXXXX` - Optional: If code is provided then this code will be activated in the response, else a code will be generated.

### Adult Guest response
+ `guest_id`: `2`,
+ `guest_name`: `Gabriel`
+ `guest_email`: `gabriel@prioticket.com`
+ `guest_type`: `Adult`
+ `guest_age`: `28`
+ `code_value`: `427ca1`

## Make Payment

### Make Payment valid request
+ `request_type`: `make_payment` (string, fixed, required) - "make_payment" for this request
+ `data` (object, fixed-type, required)
     + `distributor_id`: `180` (required) - Distributor Id.
     + `distributor_reference`: `ABC123456` (string, required) - A unique booking identifier within the Distributor's systems.
     + `order_id`: `15147415745`
     + `request_reference`: `4ud82l9dng847s` (string, required) - A unique payment request identifier.
     + `order_details` (enum[object], fixed-type, required) 
        + (Booking direct) - `Booking of ticket with timeslot (ticket_class 2) without reservation_reference`
     + `lead_name`: `Gabriel` (string, required)
     + `lead_email`: `gabriel@prioticket.com` (string, required)
     + `supplier_currency`: `EUR`
     + `supplier_amount`: `20.50`
     + `payment_currency`: `USD` (required)
     + `payment_amount`: `21.25` (required)
     + `redeem_date_time`: `2017-11-23T14:00:00+04:00`

### Make Payment valid response
  + `response_type`: `make_payment` (string, fixed, required) - "make_payment" for this response
  + `data` (object)
    + `distributor_id`: `180` (required) - Distributor Id.
    + `distributor_reference`: `ABC123456` (string, required) - A unique booking identifier within the Distributor's systems.
    + `order_id`: `15147415745`
    + `request_reference`: `4ud82l9dng847s` (string, required) - A unique payment request identifier.
    + `payment_reference`: `53ff7j9s35b43r` (string, required) - A unique payment identifier from PGP.
    + `payment_currency`: `USD` (required)
    + `payment_amount`: `21.25` (required)
    + `status` (enum)
    
        + Members
            + `SUCCESS`
            + `ERROR`

### Booking direct
+ `ticket_id`: `904` (string, required) - Unique identifier for product / ticket assigned by PrioTicket.
+ `booking_details` (array[Booking Items], fixed-type, required) - A list specifying the booking quantity per ticket type.

### Booking Items
+ `ticket_type`: `PERSON` (enum, fixed-type, required) - The current ticket type.
    
    Additional types (values) might be added.
    
    + Members
        + `ADULT` (string)
        + `CHILD` (string)
        + `INFANT` (string)
        + `SENIOR` (string)
        + `PERSON` (string)
        + `YOUTH` (string)
        
+ `count`: `2` (number, required) - The number of persons being booked for the specified ticket type.

## Errors

### Authorization Exception (object, fixed)
+ `error_code`: `AUTHORIZATION_FAILURE` (string)
+ `error_message`: `The provided credentials are not valid.` (string)
+ `error_details`: `The provided credentials are not valid.` (string)


### City response
+ `UKENLOND`: `Venue A,Venue B,Venue C,Venue D` (string)
+ `AEDUDUBA`: `Venue A,Venue B` - (Louvre, Eiffel Tower) (string)

# Group PrioTicket - Endpoints 

## Get City List [/get_city]

Distributor will call the Get City List API to request the list of cities where the Passcode service is being offered.

Initiator = Distributor<br>
Receiver = Prioticket

+ Test URL: http://test-api.prioticket.com/passcode/v3/get_city
+ Live URL: http://api.prioticket.com/passcode/v3/get_city

The `request_type` acts as a unique identifier.

### Get City List [POST]

+ Request (application/json)

    + Headers
    
                X-REQUEST-AUTHENTICATION : Qek1i6+Z2DQHyQ2ozAOU3GDb/egaJHmvtFHVcFAfZeA=
                X-REQUEST-IDENTIFIER : gdtesting_123
                
    + Attributes (Get City List valid request)

+ Response 200 (application/json)

    + Attributes (Get City List valid response)
    
+ Response 401 (application/json)
Authorization Exception

    + Attributes (Authorization Exception)    

## Get Passcode [/getpasscode]

Distributor will call the Get Passcode API to request activated QR-Codes for their guests.

Initiator = Distributor<br>
Receiver = Prioticket

+ Test URL: http://test-api.prioticket.com/passcode/v3/passcode
+ Live URL: http://api.prioticket.com/passcode/v3/passcode

The `request_type` acts as a unique identifier.

### Get Passcode [POST]

+ Request (application/json)

    + Headers
    
                X-REQUEST-AUTHENTICATION : Qek1i6+Z2DQHyQ2ozAOU3GDb/egaJHmvtFHVcFAfZeA=
                X-REQUEST-IDENTIFIER : gdtesting_123
                
    + Attributes (Get Passcode valid request)

+ Response 200 (application/json)

    + Attributes (Get Passcode valid response)
    
+ Response 401 (application/json)
Authorization Exception

    + Attributes (Authorization Exception)
    
# Group PGP - Endpoints    
## Make Payment [/makepayment]

The Payment Gateway Provider needs to make a payment service available that can accept requests according to the details of this interface specification.

Initiator = Prioticket

Receiver = Payment Gateway Provider (PGP)

+ Test URL: PGP will provide an endpoint to call the test service.
+ Live URL: PGP will provide an endpoint to call the live service.

### Make Payment [POST]

+ Request (application/json)

    + Headers
    
                X-REQUEST-AUTHENTICATION : Qek1i6+Z2DQHyQ2ozAOU3GDb/egaJHmvtFHVcFAfZeA=
                X-REQUEST-IDENTIFIER : gdtesting_123
                
    + Attributes (Make Payment valid request)

+ Response 200 (application/json)

    + Attributes (Make Payment valid response)
    
+ Response 401 (application/json)
Authorization Exception

    + Attributes (Authorization Exception)
       
# Group Errors

When an error occurs, it should be categorized into one of the types listed 
in the table below in order to facilitate error handling and debugging.

A successful call should always return a response object with a data field 
which holds all the specified response data. In case of an error, object should be send in the response containing
the `error_code` and `error_message`. To provide more detailed information about the error, the `error_details` attribute is optional.

The API should return appropriate HTTP status codes for every request.

## Example
><pre><code>{<br>&#09;"<span class="hljs-attribute">error_code</span>":<span class="hljs-string">"VALIDATION_FAILURE"</span>,<br>&#09;"<span class="hljs-attribute">error_message</span>":<span class="hljs-string">"unknown ticket type"</span><br>}</code></pre>

## Error Codes

Exception Name                 | JSON Error Code           | Explanation                                                                                         | HTTP Status Code
------------------------------:| ------------------------- | --------------------------------------------------------------------------------------------------- | ---------------------------
No Availability Exception      | NO_AVAILABILITY           | The availabilities call cannot be fulfilled because there is insufficient availability.             | 400 Bad Request
Validation Exception           | VALIDATION_FAILURE        | The request object contains inconsistent or invalid data or is missing data.                        | 400 Bad Request
Authorization Exception        | AUTHORIZATION_FAILURE     | The provided credentials are not valid.                                                             | 401 Unauthorized
InternalSystem Exception       | INTERNAL_SYSTEM_FAILURE   | An error occurred that is unexpected and/or doesn’t fit any of the types above.                     | 500 Internal Server Error